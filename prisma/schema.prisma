// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Guardian Articles ID tracking table
model GuardianArticleId {
  id         String   @id @default(cuid())
  guardianId String   @unique // The Guardian's article ID
  createdAt  DateTime @default(now())

  @@map("guardian_article_ids")
}

// Guardian Articles table
model GuardianArticle {
  id                  String   @id @default(cuid())
  guardianId          String   @unique // The Guardian's article ID
  webTitle            String
  sectionName         String?
  webPublicationDate  DateTime
  webUrl              String
  apiUrl              String
  bodyText            String?  @db.Text
  headline            String?
  thumbnail           String?
  pillarName          String?
  isHosted            Boolean  @default(false)
  isDeleted           Boolean  @default(false) // Soft delete flag
  deletedAt           DateTime? // When it was soft deleted
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relation to OpenAI summary
  openAiSummary OpenAiSummary?

  @@map("guardian_articles")
}

// OpenAI Summary table
model OpenAiSummary {
  id               String   @id @default(cuid())
  guardianArticleId String  @unique
  summary          String   @db.Text
  tldr             Json
  faqs             Json
  heading          String
  category         String
  slug             String   @unique  // ‚Üê ADD THIS LINE
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  guardianArticle GuardianArticle @relation(fields: [guardianArticleId], references: [id], onDelete: Cascade)

  @@map("openai_summaries")
}